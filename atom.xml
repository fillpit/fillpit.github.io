<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>坑飞小屋</title>
  <icon>http://example.com/icon.png</icon>
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-09-06T14:46:53.512Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>坑 飞</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Colly 入门实战</title>
    <link href="http://example.com/2021/09/06/Colly-start/"/>
    <id>http://example.com/2021/09/06/Colly-start/</id>
    <published>2021-09-06T13:27:18.000Z</published>
    <updated>2021-09-06T14:46:53.512Z</updated>
    
    <content type="html"><![CDATA[<h3 id="成果展示"><a href="#成果展示" class="headerlink" title="成果展示"></a>成果展示</h3><p>先看结果, 这是要爬的页面</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109062206510.png"></p><p>这是结果</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109062208005.png"></p><h3 id="安装-Colly"><a href="#安装-Colly" class="headerlink" title="安装 Colly"></a>安装 Colly</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gocolly/colly/...</span><br></pre></td></tr></table></figure><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">func main() &#123;</span><br><span class="line">    c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line">    // 找到并访问所有链接</span><br><span class="line">    c.OnHTML(&quot;a[href]&quot;, func(e *colly.HTMLElement) &#123;</span><br><span class="line">        e.Request.Visit(e.Attr(&quot;href&quot;))</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 打印请求的链接</span><br><span class="line">    c.OnRequest(func(r *colly.Request) &#123;</span><br><span class="line">        fmt.Println(&quot;Visiting&quot;, r.URL)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 发送 get 请求</span><br><span class="line">    c.Visit(&quot;http://go-colly.org/&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="全部有哪些回调方法"><a href="#全部有哪些回调方法" class="headerlink" title="全部有哪些回调方法"></a>全部有哪些回调方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">c.OnRequest(func(r *colly.Request) &#123;</span><br><span class="line">    fmt.Println(&quot;Visiting&quot;, r.URL)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnError(func(_ *colly.Response, err error) &#123;</span><br><span class="line">    log.Println(&quot;Something went wrong:&quot;, err)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnResponseHeaders(func(r *colly.Response) &#123;</span><br><span class="line">    fmt.Println(&quot;Visited&quot;, r.Request.URL)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnResponse(func(r *colly.Response) &#123;</span><br><span class="line">    fmt.Println(&quot;Visited&quot;, r.Request.URL)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnHTML(&quot;a[href]&quot;, func(e *colly.HTMLElement) &#123;</span><br><span class="line">    e.Request.Visit(e.Attr(&quot;href&quot;))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnHTML(&quot;tr td:nth-of-type(1)&quot;, func(e *colly.HTMLElement) &#123;</span><br><span class="line">    fmt.Println(&quot;First column of a table row:&quot;, e.Text)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnXML(&quot;//h1&quot;, func(e *colly.XMLElement) &#123;</span><br><span class="line">    fmt.Println(e.Text)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnScraped(func(r *colly.Response) &#123;</span><br><span class="line">    fmt.Println(&quot;Finished&quot;, r.Request.URL)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="调用顺序"><a href="#调用顺序" class="headerlink" title="调用顺序"></a>调用顺序</h3><p>1.OnRequest<br>在请求之前调用</p><p>2.OnError<br>如果请求期间发生错误,则调用</p><p>3.OnResponseHeaders<br>在收到响应标头后调用</p><p>4.OnResponse<br>收到回复后调用</p><p>5.OnHTML<br>OnResponse如果收到的内容是HTML ,则在之后调用</p><p>6.OnXML<br>OnHTML如果接收到的内容是HTML或XML ,则在之后调用</p><p>7.OnScraped<br>OnXML回调后调用</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>这是地址页 <a href="https://www.manhuadb.com/manhua/25797">地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">package main</span><br><span class="line"></span><br><span class="line">import (</span><br><span class="line">zipUtils &quot;Spider/utils&quot;</span><br><span class="line">&quot;bytes&quot;</span><br><span class="line">&quot;fmt&quot;</span><br><span class="line">&quot;io&quot;</span><br><span class="line">&quot;io/ioutil&quot;</span><br><span class="line">&quot;os&quot;</span><br><span class="line">&quot;path&quot;</span><br><span class="line">&quot;regexp&quot;</span><br><span class="line">&quot;strconv&quot;</span><br><span class="line">&quot;strings&quot;</span><br><span class="line"></span><br><span class="line">&quot;github.com/gocolly/colly&quot;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">func main() &#123;</span><br><span class="line">temp := &quot;./out/temp&quot;</span><br><span class="line">chapter := temp</span><br><span class="line">zipDir := &quot;./out/zip&quot;</span><br><span class="line">zipFile := &quot;x.zip&quot;</span><br><span class="line">bookId := &quot;25797&quot;</span><br><span class="line">bookHome := &quot;https://www.manhuadb.com/manhua/&quot; + bookId</span><br><span class="line"></span><br><span class="line">// Instantiate default collector</span><br><span class="line">c := colly.NewCollector()</span><br><span class="line"></span><br><span class="line">// Before making a request print &quot;Visiting ...&quot;</span><br><span class="line">c.OnRequest(func(r *colly.Request) &#123;</span><br><span class="line">fmt.Println(&quot;Visiting&quot;, r.URL.String())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnRequest(func(rq *colly.Request) &#123;</span><br><span class="line">rq.Headers.Add(&quot;Accept&quot;, &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;)</span><br><span class="line">rq.Headers.Add(&quot;Accept-Encoding&quot;, &quot;gzip, deflate&quot;)</span><br><span class="line">rq.Headers.Add(&quot;Accept-Language&quot;, &quot;zh,en-US;q=0.9,en;q=0.8,zh-TW;q=0.7,zh-CN;q=0.6&quot;)</span><br><span class="line">rq.Headers.Add(&quot;Cache-Control&quot;, &quot;no-cache&quot;)</span><br><span class="line">rq.Headers.Add(&quot;Connection&quot;, &quot;keep-alive&quot;)</span><br><span class="line">rq.Headers.Add(&quot;Host&quot;, &quot;www.manhuadb.com&quot;)</span><br><span class="line">rq.Headers.Add(&quot;Pragma&quot;, &quot;no-cache&quot;)</span><br><span class="line">rq.Headers.Add(&quot;User-Agent&quot;, &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36&quot;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.OnResponse(func(r *colly.Response) &#123;</span><br><span class="line">//fmt.Println(string(r.Body))</span><br><span class="line"></span><br><span class="line">if strings.Contains(r.Headers.Get(&quot;content-type&quot;), &quot;image&quot;) &#123;</span><br><span class="line">fileName := path.Base(r.Request.URL.String())</span><br><span class="line">f, err := os.Create(chapter + &quot;/&quot; + fileName)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">panic(err)</span><br><span class="line">&#125;</span><br><span class="line">io.Copy(f, bytes.NewReader(r.Body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 标题</span><br><span class="line">c.OnHTML(&quot;h1[class=\&quot;comic-title\&quot;]&quot;, func(e *colly.HTMLElement) &#123;</span><br><span class="line">fmt.Printf(&quot;返回值: %s \n&quot;, e.Text)</span><br><span class="line">text := strings.Replace(e.Text, &quot; &quot;, &quot;&quot;, -1)  // 去 空格</span><br><span class="line">text = strings.Replace(e.Text, &quot;?&quot;, &quot;&quot;, -1)// 去 ？</span><br><span class="line">temp =  temp + &quot;/&quot; + text</span><br><span class="line">os.MkdirAll(temp, 0711)</span><br><span class="line">zipDir = zipDir + &quot;/&quot; + text</span><br><span class="line">os.MkdirAll(zipDir, 0711)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 章节列表</span><br><span class="line">c.OnHTML(&quot;li[class=\&quot;sort_div fixed-wd-num\&quot;] &gt; a&quot;, func(e *colly.HTMLElement) &#123;</span><br><span class="line">chapterTitle := e.Attr(&quot;title&quot;)</span><br><span class="line">if chapterTitle != &quot;&quot; &#123;</span><br><span class="line">println(&quot;章节==：&quot;, chapterTitle)</span><br><span class="line">url := e.Attr(&quot;href&quot;)</span><br><span class="line"></span><br><span class="line">chapter = temp + &quot;/&quot; + chapterTitle</span><br><span class="line">os.MkdirAll(chapter, 0711)</span><br><span class="line"></span><br><span class="line">chapterUrl := &quot;https://www.manhuadb.com&quot; + url</span><br><span class="line">c.Visit(chapterUrl)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// img 列表</span><br><span class="line">c.OnHTML(&quot;div[class=\&quot;text-center pjax-container\&quot;] &gt; img&quot;, func(e *colly.HTMLElement) &#123;</span><br><span class="line">imgUrl := e.Attr(&quot;src&quot;)</span><br><span class="line">if imgUrl != &quot;&quot; &#123;</span><br><span class="line">c.Visit(imgUrl)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 判断是否还有下一页</span><br><span class="line">c.OnHTML(&quot;div[class=\&quot;container-fluid comic-detail p-0\&quot;]&quot;, func(e *colly.HTMLElement) &#123;</span><br><span class="line">pageHref := e.ChildAttr(&quot;li[class=\&quot;breadcrumb-item active\&quot;] &gt; a&quot;, &quot;href&quot;)</span><br><span class="line">currentPage := e.ChildText(&quot;li[class=\&quot;breadcrumb-item active\&quot;] &gt; span&quot;)</span><br><span class="line">reg := regexp.MustCompile(&quot;共 ([0-9]*?) 页&quot;)</span><br><span class="line"></span><br><span class="line">sumPageSize := reg.FindStringSubmatch(e.ChildText(&quot;li[class=\&quot;breadcrumb-item active\&quot;]&quot;))</span><br><span class="line"></span><br><span class="line">hrefs := strings.Split(pageHref, &quot;.&quot;)</span><br><span class="line">sumPageSizeNum, err:=strconv.Atoi(sumPageSize[1])</span><br><span class="line">currentPageNum, err:=strconv.Atoi(currentPage)</span><br><span class="line">if err != nil &#123;</span><br><span class="line">println(err)</span><br><span class="line">&#125;</span><br><span class="line">if currentPageNum &lt; sumPageSizeNum &#123;</span><br><span class="line">p :=strconv.Itoa(currentPageNum + 1)</span><br><span class="line">next := &quot;https://www.manhuadb.com&quot; + hrefs[0] + &quot;_p&quot;+ p +&quot;.&quot; + hrefs[1]</span><br><span class="line"></span><br><span class="line">c.Visit(next)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// Start scraping on https://hackerspaces.org</span><br><span class="line">c.Visit(bookHome)</span><br><span class="line"></span><br><span class="line">// 压缩</span><br><span class="line">items, _ := ioutil.ReadDir(temp)</span><br><span class="line">for _, item := range items &#123;</span><br><span class="line">if item.IsDir() &#123;</span><br><span class="line">src := temp + &quot;/&quot; + item.Name()</span><br><span class="line">zipFile = item.Name() + &quot;.cbz&quot;</span><br><span class="line">dest := zipDir + &quot;/&quot; + zipFile</span><br><span class="line">zipUtils.CompressFile(src, dest)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>代码仓库地址 <a href="https://github.com/fillpit/Spider">https://github.com/fillpit/Spider</a></p></blockquote>]]></content>
    
    
    <summary type="html">Colly 从入门到上手</summary>
    
    
    
    <category term="折腾" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="爬虫" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/%E7%88%AC%E8%99%AB/"/>
    
    
    <category term="Colly" scheme="http://example.com/tags/Colly/"/>
    
    <category term="golang" scheme="http://example.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>使用 GitHub Actions 实现 Hexo 博客自动部署</title>
    <link href="http://example.com/2021/09/06/%E4%BD%BF%E7%94%A8%20GitHub%20Actions%20%E5%AE%9E%E7%8E%B0%20Hexo%20%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/"/>
    <id>http://example.com/2021/09/06/%E4%BD%BF%E7%94%A8%20GitHub%20Actions%20%E5%AE%9E%E7%8E%B0%20Hexo%20%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</id>
    <published>2021-09-06T07:30:41.000Z</published>
    <updated>2021-09-06T09:00:13.048Z</updated>
    
    <content type="html"><![CDATA[<p>hexo 本身就支持快捷部署的命令, 不过每次都要执行 <code>hexo d</code> 这个命令, 而且还要确保本地环境没有问题, 一旦换个环境又得重新配置,实属麻烦, 我们的原则是能躺着决不坐着, 加上<br>GitHub Actions 又是免费的, 不用白不用</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><ul><li>hexo 的源工程文件单独建立一个私有仓库</li><li>每次提交完代码后触发构建</li><li>让 GitHub Actions 帮我们自动执行 <code>hexo d</code> 命令</li></ul><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li><ol><li>首先确保你已经创建了保存工程源代码的仓库 和 GitHub Page 仓库</li></ol></li><li><ol start="2"><li>确定你在本地执行 <code>hexo d</code> 可以正常部署</li></ol></li></ul><h3 id="生成-ssh-key"><a href="#生成-ssh-key" class="headerlink" title="生成 ssh key"></a>生成 ssh key</h3><p>ssh key 的作用是保证可以不用登陆也可以正常的 提交/拉去 代码, 因为把 用户名和密码暴露在网上是不安全的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;$(git config user.email)&quot; -f hexo-deploy-key -N &quot;&quot;</span><br></pre></td></tr></table></figure><p>在当前目录下生成文件:<br>    * hexo-deploy-key       # 私钥文件<br>    * hexo-deploy-key.pub   # 公钥文件</p><blockquote><p>切记不要把这两个文件上传到仓库里, 避免泄露</p></blockquote><h3 id="在源代码仓库添加-私钥"><a href="#在源代码仓库添加-私钥" class="headerlink" title="在源代码仓库添加 私钥"></a>在源代码仓库添加 私钥</h3><p>在仓库页面依次点击  Settings -&gt; Secrets -&gt; new repository secrets, 如下图</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109061617256.png" alt="new repository secrets"></p><p>key 设置为 HEXO_DEPLOY_KEY, 当然你也可以自取, 那后面也要跟着改</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109061621327.png"></p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN OPENSSH PRIVATE KEY-----</span><br><span class="line">b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn</span><br><span class="line">.......</span><br><span class="line">vgpvENPs0nbwDfAAAAEWtlbmZlaUBhbGl5dW4uY29tAQ==</span><br><span class="line">-----END OPENSSH PRIVATE KEY-----</span><br></pre></td></tr></table></figure><h3 id="在-GitHub-Pages-页添加公钥"><a href="#在-GitHub-Pages-页添加公钥" class="headerlink" title="在 GitHub Pages 页添加公钥"></a>在 GitHub Pages 页添加公钥</h3><p>在仓库页面依次点击  Settings -&gt; Deploye keys -&gt; Add deploy key, 如下图</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109061627860.png"></p><p>key 可以自己取, 自己认识就行, 没有影响, 这里默认就用 <code>hexo-deploy-keys</code> </p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109061631535.png"></p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3Nza6pD .... ZYIVYIDyOFNmtjBZVyAXK+rKKYeC3U= xxx@aliyun.com</span><br></pre></td></tr></table></figure><h3 id="编写-workflows-文件"><a href="#编写-workflows-文件" class="headerlink" title="编写 workflows 文件"></a>编写 workflows 文件</h3><p>在 源代码工程目录下创建流程文件 .github/workflows/deploy.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Deploy</span> <span class="comment"># workflow name</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  [<span class="string">push</span>] <span class="comment"># 触发事件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span> <span class="comment"># job1 id</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">A</span> <span class="string">job</span> <span class="string">to</span> <span class="string">deploy</span> <span class="string">blog.</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">    <span class="comment"># 获取源码</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> </span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/checkout@v1</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="comment"># 签出私有子模块(主题或其他内容)</span></span><br><span class="line">        <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 缓存压缩 node_modules，不用每次下载，使用时解压，可以加快工作流的执行过程，超过 7 天没有使用将删除压缩包。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">node</span> <span class="string">modules</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">cache</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">node_modules</span></span><br><span class="line">        <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-node-$&#123;&#123;</span> <span class="string">hashFiles(&#x27;**/package-lock.json&#x27;)</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">restore-keys:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          $&#123;&#123; runner.os &#125;&#125;-node-</span></span><br><span class="line"><span class="string"></span>    </span><br><span class="line">    <span class="comment"># 安装依赖</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dependencies</span></span><br><span class="line">      <span class="attr">if:</span> <span class="string">steps.cache.outputs.cache-hit</span> <span class="type">!=</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 部署 hexo 博客网站.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">      <span class="attr">id:</span> <span class="string">deploy</span></span><br><span class="line">      <span class="attr">uses:</span> <span class="string">sma11black/hexo-action@v1.0.0</span></span><br><span class="line">      <span class="attr">with:</span></span><br><span class="line">        <span class="attr">deploy_key:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">user_name:</span> <span class="string">your</span> <span class="string">github</span> <span class="string">username</span></span><br><span class="line">        <span class="attr">user_email:</span> <span class="string">your</span> <span class="string">github</span> <span class="string">useremail</span></span><br></pre></td></tr></table></figure><blockquote><p>注意: 里面有两个需要配置的地方<br>user_name: 你 github 的用户名(举例: 在 <code>https://github.com/fillpit/xxxx</code> 中 <code>fillpit</code> 就是用户名)<br>user_email: 你 github 的注册邮箱</p></blockquote><h3 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h3><p>查看项目根目录中 _config.yml 文件的部署相关内容：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:fillpit/fillpit.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><blockquote><p>这里的repo要填写ssh的形式，千万不要使用http形式</p></blockquote><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>现在 Hexo 已经和 GitHub Actions 已经集成了，接下来在博客源码分支上推送代码即可自动编译部署。具体<br>执行过程可以在 Actions 中查看：</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109061700542.png"></p><h3 id="事故现场"><a href="#事故现场" class="headerlink" title="事故现场"></a>事故现场</h3><p>出现 could not read Username for ‘<a href="https://github.com&/#39;">https://github.com&#39;</a>: No such device or address</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109061651462.png"></p><blockquote><p>解决方案: 查看 <code>_config.yml</code> 中的 deploy.repo 字段是不是用了 http 形式的链接, 如果是就 改成 ssh 形式的, 具体配置查看上面的  <code>Hexo 配置</code> </p></blockquote>]]></content>
    
    
    <summary type="html">使用 GitHub Actions 实现 Hexo 博客自动部署</summary>
    
    
    
    <category term="折腾" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="hexo" scheme="http://example.com/tags/hexo/"/>
    
    <category term="GitHub Actions" scheme="http://example.com/tags/GitHub-Actions/"/>
    
  </entry>
  
  <entry>
    <title>Unraid 借助 rclone 备份数据到 阿里云盘</title>
    <link href="http://example.com/2021/08/04/Unraid-%E5%80%9F%E5%8A%A9-rclone-%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%88%B0-%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"/>
    <id>http://example.com/2021/08/04/Unraid-%E5%80%9F%E5%8A%A9-rclone-%E5%A4%87%E4%BB%BD%E6%95%B0%E6%8D%AE%E5%88%B0-%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/</id>
    <published>2021-08-04T11:36:48.000Z</published>
    <updated>2021-09-06T02:44:09.285Z</updated>
    
    <content type="html"><![CDATA[<p>狡兔三窟, 备份数据到 阿里云盘</p><!-- more --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>nas 虽好, 但总有硬盘损毁的时候, 所以备份数据是个好习惯, 阿里云盘容量大还不限速, 所以是个不错的选择, 但官方可没提供这样的功能, 所以我们要借助 <a href="https://github.com/zxbu/webdav-aliyundriver">webdav-aliyundriver</a> 这个项目为 阿里云盘 开启 webdav, 再用 rclone 来同步本地要备份的数据到 阿里云盘上</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>先为 阿里云盘 开启 webdav 协议, 可以到这里找到</p><blockquote><p><a href="https://blog.fillpit.cn/kai-qi-a-li-yun-pan-de-web-dav-zhi-chi-s/">https://blog.fillpit.cn/kai-qi-a-li-yun-pan-de-web-dav-zhi-chi-s/</a></p></blockquote><h3 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h3><p>登录 unraid 的管理界面, 点击 应用 -&gt; 搜索 rclone -&gt; 安装插件</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041735190.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><p>再下载 User Scripts 插件</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041739010.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><h3 id="配置-rclone"><a href="#配置-rclone" class="headerlink" title="配置 rclone"></a>配置 rclone</h3><p>打开unraid 的控制台, 输入 <code>rclone config</code></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041813442.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041814796.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041814572.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><h3 id="测试配置是否正常"><a href="#测试配置是否正常" class="headerlink" title="测试配置是否正常"></a>测试配置是否正常</h3><p>输入 <code>rclone ls remote:</code> 列出 WebDAV 中的所有文件</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041832717.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><h3 id="同步文件"><a href="#同步文件" class="headerlink" title="同步文件"></a>同步文件</h3><p>我这里用 appdata 目录来做演示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rclone sync /mnt/user/appdata Alibaba-webdev:unraid_appdata/</span><br></pre></td></tr></table></figure><ul><li>  rclone sync – 同步命令</li><li>  /mnt/user/appdata – 要同步的本地目录</li><li>  Alibaba-webdev:unraid_appdata/ – 上传到 Alibaba-webdev 服务的 unraid_appdata 目录下</li></ul><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041844357.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><h3 id="定时执行同步"><a href="#定时执行同步" class="headerlink" title="定时执行同步"></a>定时执行同步</h3><p>点击 设置 -&gt; User Scripts</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041935477.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041935321.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041936600.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041936204.png" alt="Unraid 借助 rclone 备份数据到 阿里云盘"></p><h3 id="附-rclone-常用命令"><a href="#附-rclone-常用命令" class="headerlink" title="附: rclone 常用命令"></a>附: rclone 常用命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">rclone config - 以控制会话的形式添加rclone的配置，配置保存在.rclone.conf文件中。</span><br><span class="line">rclone copy - 将文件从源复制到目的地址，跳过已复制完成的。</span><br><span class="line">rclone sync - 将源数据同步到目的地址，只更新目的地址的数据。</span><br><span class="line">rclone move - 将源数据移动到目的地址。</span><br><span class="line">rclone delete - 删除指定路径下的文件内容。</span><br><span class="line">rclone purge - 清空指定路径下所有文件数据。</span><br><span class="line">rclone mkdir - 创建一个新目录。</span><br><span class="line">rclone rmdir - 删除空目录。</span><br><span class="line">rclone check - 检查源和目的地址数据是否匹配。</span><br><span class="line">rclone ls - 列出指定路径下所有的文件以及文件大小和路径。</span><br><span class="line">rclone lsd - 列出指定路径下所有的目录/容器/桶。</span><br><span class="line">rclone lsl - 列出指定路径下所有文件以及修改时间、文件大小和路径。</span><br><span class="line">rclone md5sum - 为指定路径下的所有文件产生一个md5sum文件。</span><br><span class="line">rclone sha1sum - 为指定路径下的所有文件产生一个sha1sum文件。</span><br><span class="line">rclone size - 获取指定路径下，文件内容的总大小。.</span><br><span class="line">rclone version - 查看当前版本。</span><br><span class="line">rclone cleanup - 清空remote。</span><br><span class="line">rclone dedupe - 交互式查找重复文件，进行删除/重命名操作。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">狡兔三窟, 备份数据到 阿里云盘</summary>
    
    
    
    <category term="折腾" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="阿里云盘" scheme="http://example.com/tags/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"/>
    
    <category term="unraid" scheme="http://example.com/tags/unraid/"/>
    
    <category term="备份" scheme="http://example.com/tags/%E5%A4%87%E4%BB%BD/"/>
    
    <category term="rclone" scheme="http://example.com/tags/rclone/"/>
    
  </entry>
  
  <entry>
    <title>开启阿里云盘的 Web DAV 支持, 设置本地挂载</title>
    <link href="http://example.com/2021/08/04/%E5%BC%80%E5%90%AF%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E7%9A%84-Web-DAV-%E6%94%AF%E6%8C%81-%E8%AE%BE%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%8C%82%E8%BD%BD/"/>
    <id>http://example.com/2021/08/04/%E5%BC%80%E5%90%AF%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98%E7%9A%84-Web-DAV-%E6%94%AF%E6%8C%81-%E8%AE%BE%E7%BD%AE%E6%9C%AC%E5%9C%B0%E6%8C%82%E8%BD%BD/</id>
    <published>2021-08-04T09:30:41.000Z</published>
    <updated>2021-09-06T02:39:54.992Z</updated>
    
    <content type="html"><![CDATA[<p>把不限速的 阿里云盘 挂载到电脑上当本地硬盘使用</p><!-- more --><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>把不限速的 阿里云盘 挂载到电脑上当本地硬盘使用, 但 阿里云盘 并不支持这个功能, 借助 <a href="https://github.com/zxbu/webdav-aliyundriver">webdav-aliyundriver</a> 这个项目, 我们可以为 阿里云盘 开启 webdav 协议来支持本地硬盘挂载</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>首先你得有个阿里云盘的账号, 没有的话就先去注册一个</p><ul><li>  <a href="https://www.aliyundrive.com/sign/in">官方链接</a></li><li>  <a href="https://pages.aliyundrive.com/mobile-page/web/beinvited.html?code=7339065">邀请链接, 注册可得500G</a></li></ul><h3 id="运行-dacker-容器"><a href="#运行-dacker-容器" class="headerlink" title="运行 dacker 容器"></a>运行 dacker 容器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">    --name=webdav-aliyundriver \</span><br><span class="line">    --restart=always \</span><br><span class="line">    -p 8080:8080  \</span><br><span class="line">    -v /etc/localtime:/etc/localtime \</span><br><span class="line">    -v /etc/aliyun-driver/:/etc/aliyun-driver/ \</span><br><span class="line">    -e TZ=&quot;Asia/Shanghai&quot; \</span><br><span class="line">    -e ALIYUNDRIVE_REFRESH_TOKEN=&quot;your refreshToken&quot; \</span><br><span class="line">    -e ALIYUNDRIVE_AUTH_PASSWORD=&quot;admin&quot; \</span><br><span class="line">    -e JAVA_OPTS=&quot;-Xmx1g&quot; \</span><br><span class="line">    zx5253/webdav-aliyundriver</span><br></pre></td></tr></table></figure><p>docker-compose.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3&#x27;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  webdav-aliyundriver:</span><br><span class="line">    image: zx5253/webdav-aliyundriver</span><br><span class="line">    container_name: webdav-aliyundriver</span><br><span class="line">    restart: always</span><br><span class="line">    volumes:</span><br><span class="line">      - /etc/localtime:/etc/localtime</span><br><span class="line">      - $PWD/aliyun-driver/:/etc/aliyun-driver/</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8080:8080&quot;</span><br><span class="line">    environment:</span><br><span class="line">      - TZ=Asia/Shanghai</span><br><span class="line">      - JAVA_OPTS=-Xmx1g                  # 最大内存占用, 限制为1G</span><br><span class="line">      - ALIYUNDRIVE_REFRESH_TOKEN=token   # 阿里云盘的token, 下面有获取方式</span><br><span class="line">      - ALIYUNDRIVE_AUTH_USER_NAME=用户名  # WebDav账户,不是阿里云的账号</span><br><span class="line">      - ALIYUNDRIVE_AUTH_PASSWORD=密码     # WebDav密码,不是阿里云的密码</span><br></pre></td></tr></table></figure><h3 id="浏览器获取refreshToken方式"><a href="#浏览器获取refreshToken方式" class="headerlink" title="浏览器获取refreshToken方式"></a>浏览器获取refreshToken方式</h3><ol><li> 先通过浏览器（建议chrome）打开 <a href="https://www.aliyundrive.com/drive/">阿里云盘官网并登录</a></li><li> 登录成功后，按 <code>F12</code> 打开开发者工具，点击 <code>Application -&gt; Local Storage -&gt; https://www.aliyundrive.com/ -&gt; token</code>，此时可以看到里面的数据，其中就有refresh_token，把其值复制出来即可。（格式为小写字母和数字，不要复制双引号。例子：ca6bf2175d73as2188efg81f87e55f11）</li></ol><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041659989.png" alt="开启阿里云盘的 Web DAV 支持, 设置本地挂载"></p><h3 id="测试服务是正常"><a href="#测试服务是正常" class="headerlink" title="测试服务是正常"></a>测试服务是正常</h3><p>使用支持webdav的系统或软件来挂载阿里云盘webdav, 可以先在浏览器中测试服务是否正常  </p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041659893.png" alt="开启阿里云盘的 Web DAV 支持, 设置本地挂载"></p><h3 id="Mac-挂载-WebDAV-服务器"><a href="#Mac-挂载-WebDAV-服务器" class="headerlink" title="Mac 挂载 WebDAV 服务器"></a>Mac 挂载 WebDAV 服务器</h3><ol><li>在 Mac 上的“访达” 中，选取“前往”&gt;“连接服务器”，在“服务器地址”栏中输入服务器的地址，然后点按“连接”。  </li></ol><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041700529.png" alt="开启阿里云盘的 Web DAV 支持, 设置本地挂载"></p><ol><li>在“服务器地址”栏中输入服务器的地址。WebDAV 服务器地址应该与以下的格式类似：<a href="http://servername.com/path/">http://servername.com/path/</a>  </li></ol><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041700327.png" alt="开启阿里云盘的 Web DAV 支持, 设置本地挂载"></p><ol><li>点按“连接” 后会弹出框输入用户名密码后即可  </li></ol><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202108041701574.png" alt="开启阿里云盘的 Web DAV 支持, 设置本地挂载"></p><h3 id="客户端兼容性"><a href="#客户端兼容性" class="headerlink" title="客户端兼容性"></a>客户端兼容性</h3><p>客户端</p><p>下载</p><p>上传</p><p>备注</p><p>群辉Cloud Sync</p><p>可用</p><p>可用</p><p>使用单向同步非常稳定</p><p>Rclone</p><p>可用</p><p>可用</p><p>推荐，支持各个系统</p><p>Mac原生</p><p>可用</p><p>可用</p><p>Windows原生</p><p>可用</p><p>有点小问题</p><p>不建议，适配有点问题，上传报错</p><p>RaiDrive</p><p>可用</p><p>可用</p><p>Windows平台下建议用这个</p>]]></content>
    
    
    <summary type="html">把不限速的 阿里云盘 挂载到电脑上当本地硬盘使用</summary>
    
    
    
    <category term="折腾" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    <category term="阿里云盘" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9B%98/"/>
    
    
    <category term="blog" scheme="http://example.com/tags/blog/"/>
    
  </entry>
  
  <entry>
    <title>用 Docker 搭建 frps 内网穿透服务</title>
    <link href="http://example.com/2021/06/17/%E7%94%A8-Docker-%E6%90%AD%E5%BB%BA-frps-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2021/06/17/%E7%94%A8-Docker-%E6%90%AD%E5%BB%BA-frps-%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E6%9C%8D%E5%8A%A1/</id>
    <published>2021-06-17T07:06:25.000Z</published>
    <updated>2021-09-06T02:40:41.610Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp 协议，为 http 和 https 应用协议提供了额外的能力，且尝试性支持了点对点穿透。</p></blockquote><!-- more --><p><img src="https://blog.fillpit.cn/content/images/2021/06/QQ20210617-150546.png" alt="用 Docker 搭建 frps 内网穿透服务"></p><p>虽然现在<a href="https://www.iplaysoft.com/tag/%E5%AE%BD%E5%B8%A6">宽带</a>速度都很快，但对于电脑玩家来说，最大的问题是“<strong>没有公网 IP</strong>”！这使得想要在外访问家里的电脑、<a href="https://www.iplaysoft.com/go/nas">NAS</a>、树莓派、<a href="https://www.iplaysoft.com/tag/%E6%91%84%E5%83%8F%E5%A4%B4">摄像头</a>等网络设备或<a href="https://www.iplaysoft.com/tag/%E8%BF%9C%E7%A8%8B">远程</a>控制等，都无法轻松实现。</p><p>这时你就需要一款<strong>内网穿透工具</strong>来让外网与你家内网建立起连接，实现无公网 IP 的远程访问了。「<strong>Frp</strong>」是一款流行的跨平台<a href="https://www.iplaysoft.com/tag/%E5%BC%80%E6%BA%90">开源</a>免费内网穿透工具，支持 Windows、<a href="https://www.iplaysoft.com/os/mac-platform">macOS</a> 与 <a href="https://www.iplaysoft.com/os/linux-platform">Linux</a>。你只需一台<a href="https://www.iplaysoft.com/aliyun-sale.html">快速稳定的 VPS 服务器</a>即可愉快地进行内网穿透，实现家中设备公网直接访问了……</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>自从学会了docker,我就在搭建各种环境的时候就有了_洁癖_:服务器上的各种软件,必须使用docker来搭建.</p><p>去hub.docker.com上搜了一下,有现成的服务端( <a href="https://hub.docker.com/r/snowdreamtech/frps"><code>snowdreamtech/frps</code></a>) 和客户端(<a href="https://hub.docker.com/r/snowdreamtech/frpc"><code>snowdreamtech/frpc</code></a>),但这次我只需要服务端就好了，如果你的 openwrt 固件上没有安装frpc 客户端，你可以在这里下载( <a href="https://github.com/kuoruan/openwrt-frp">kuoruan/</a><strong><a href="https://github.com/kuoruan/openwrt-frp">openwrt-frp</a> 和</strong> <a href="https://github.com/kuoruan/luci-app-frpc">kuoruan/<strong>luci-app-frpc</strong></a>)</p><h3 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h3><p>先创建服务端的配置文件`frps.ini` (<a href="https://github.com/fatedier/frp/blob/master/conf/frps_full.ini">完整的服务端配置</a>)</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 绑定远程主机端口</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">17000</span></span><br><span class="line"><span class="comment"># 开启 token 验证</span></span><br><span class="line"><span class="attr">token</span> = P.<span class="number">3</span>cqN4vr4g9oPRvN.PB</span><br><span class="line"></span><br><span class="line"><span class="comment"># http 和 https 的访问端口</span></span><br><span class="line"><span class="comment"># http端口和https端口可以与bind_port相同</span></span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">10080</span></span><br><span class="line"><span class="comment"># vhost_https_port = 10443</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监控面板端口 </span></span><br><span class="line"><span class="comment"># 注：Dashboard 尚未针对大量的 proxy 数据展示做优化，如果出现 Dashboard 访问较慢的情况，请不要启用此功能。</span></span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">17500</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br><span class="line"> </span><br><span class="line"><span class="comment"># TCP 多路复用</span></span><br><span class="line"><span class="comment"># 从 v0.10.0 版本开始，客户端和服务器端之间的连接支持多路复用，不再需要为每一个用户请# # 求创建一个连接，使连接建立的延迟降低，并且避免了大量文件描述符的占用，使 frp 可以承载# 更高的并发数。</span></span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接池</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义二级域名</span></span><br><span class="line"><span class="comment"># 只需要将 *.&#123;subdomain_host&#125; 解析到 frps 所在服务器。之后用户可以通过 subdomain </span></span><br><span class="line"><span class="comment"># 行指定自己的 web 服务所需要使用的二级域名，通过 &#123;subdomain&#125;.&#123;subdomain_host&#125; 来访</span></span><br><span class="line"><span class="comment"># 问自己的 web 服务。</span></span><br><span class="line"><span class="attr">subdomain_host</span> = fillpit.top</span><br></pre></td></tr></table></figure><h3 id="创建-docker-compose-yml-文件"><a href="#创建-docker-compose-yml-文件" class="headerlink" title="创建 docker-compose.yml 文件"></a>创建 docker-compose.yml 文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">frps:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">snowdreamtech/frps</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">frps</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;17000:17000&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;17500:17500&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10080:10080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;10010-10020&quot;</span><span class="string">:&quot;10010-10020&quot;</span> <span class="comment"># 映射其他端口</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$PWD/conf/frps.ini:/etc/frp/frps.ini</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>执行 `docker stack deploy  myfrps -c=docker-compose.yml`</p><h3 id="创建客户端配置-frpc-ini"><a href="#创建客户端配置-frpc-ini" class="headerlink" title="创建客户端配置 frpc.ini"></a>创建客户端配置 frpc.ini</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># frpc.ini</span></span><br><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="comment"># 服务器地址 和 端口</span></span><br><span class="line"><span class="attr">server_addr</span> = x.x.x.x</span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span></span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="comment"># 连接类型，填 http 或 https</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地web服务访问地址 和端口</span></span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启 加密与压缩</span></span><br><span class="line"><span class="attr">use_encryption</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">use_compression</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端的访问子域名，搭配服务端的 [subdomain_host] 使用</span></span><br><span class="line"><span class="comment"># 通过 test.frps.com 就可以访问到内网的 web 服务。</span></span><br><span class="line"><span class="attr">subdomain</span> = test</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过密码保护你的 web 服务</span></span><br><span class="line"><span class="comment"># 由于所有客户端共用一个 frps 的 http 服务端口，任何知道你的域名和 url 的人都能访问到</span></span><br><span class="line"><span class="comment"># 你部署在内网的 web 服务，但是在某些场景下需要确保只有限定的用户才能访问。</span></span><br><span class="line"><span class="attr">http_user</span> = abc</span><br><span class="line"><span class="attr">http_pwd</span> = abc</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">在外面访问家里的服务</summary>
    
    
    
    <category term="折腾" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="Frps" scheme="http://example.com/tags/Frps/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry pi 4B 修改系统默认为Python3</title>
    <link href="http://example.com/2021/06/17/Raspberry-pi-4B-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E4%B8%BAPython3/"/>
    <id>http://example.com/2021/06/17/Raspberry-pi-4B-%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E9%BB%98%E8%AE%A4%E4%B8%BAPython3/</id>
    <published>2021-06-17T06:54:06.000Z</published>
    <updated>2021-09-06T02:43:50.967Z</updated>
    
    <content type="html"><![CDATA[<p>如果没有修改的话系统默认是python2 的, 可以输入 python -V 进行查看</p><p><img src="https://blog.fillpit.cn/content/images/2020/05/TIM--20200502170656.png" alt="Raspberry pi 4B 修改系统默认为Python3"></p><p>进入 /usr/bin 目录下输入 ls -all | grep python 命令我们可以看到系统默认是指向python2 的，我们只需要修改一下软链接的指向就可以了</p><p><img src="https://blog.fillpit.cn/content/images/2020/05/TIM--20200502171227.png" alt="Raspberry pi 4B 修改系统默认为Python3"></p><p>先删除python2的软链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm python</span><br></pre></td></tr></table></figure><p>再创建指向 python3 的软链接</p><p>再次查看版本号可以看到已经被我们修改成python3 了</p><p><img src="https://blog.fillpit.cn/content/images/2020/05/TIM--20200502172057.png" alt="Raspberry pi 4B 修改系统默认为Python3"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;#x5982;&amp;#x679C;&amp;#x6CA1;&amp;#x6709;&amp;#x4FEE;&amp;#x6539;&amp;#x7684;&amp;#x8BDD;&amp;#x7CFB;&amp;#x7EDF;&amp;#x9ED8;&amp;#x8BA4;&amp;#x662F;python2 &amp;#x7684;, &amp;#x53EF;&amp;#x4EE5;&amp;#x8F93;&amp;#x5165; python -V &amp;#x8FDB;&amp;#x884C;&amp;#x67E5;&amp;#x770B;&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://blog.fillpit.cn/content/images/2020/05/TIM--20200502170656.png&quot; class=&quot;kg-image&quot; alt loading=&quot;lazy&quot;&gt;&lt;/figure&gt;&lt;p&gt;&amp;#x8FDB;&amp;#x5165; /usr/bin &amp;#x76EE;&amp;#x5F55;&amp;#x4E0B;&amp;#x8F93;&amp;#x5165; ls -all | grep python &amp;#x547D;&amp;#x4EE4;&amp;#x6211;&amp;#x4EEC;&amp;#x53EF;&amp;#x4EE5;&amp;#x770B;&amp;#x5230;&amp;#x7CFB;&amp;#x7EDF;&amp;#x9ED8;&amp;#x8BA4;&lt;/p&gt;</summary>
    
    
    
    <category term="开发环境" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="raspberry pi" scheme="http://example.com/tags/raspberry-pi/"/>
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>开启Chrome多线程下载</title>
    <link href="http://example.com/2021/05/09/%E5%BC%80%E5%90%AFChrome%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/"/>
    <id>http://example.com/2021/05/09/%E5%BC%80%E5%90%AFChrome%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%8B%E8%BD%BD/</id>
    <published>2021-05-09T03:26:18.000Z</published>
    <updated>2021-09-06T02:40:29.074Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>告别龟速下载</p></blockquote><!-- more --><p>在地址栏输入并回车：<code>chrome://flags/#enable-parallel-downloading</code></p><p><img src="https://blog.fillpit.cn/content/images/2021/05/image.png" alt="开启Chrome多线程下载"></p><p>视图会自动帮你定位到这一行, 点击右边的选项列表选择 <code>Enabled</code></p><p><img src="https://blog.fillpit.cn/content/images/2021/05/image-3.png" alt="开启Chrome多线程下载"></p><p>点击底部的<code>Relaunch</code>重启浏览器</p><hr><p><img src="https://blog.fillpit.cn/content/images/2021/05/image-4.png" alt="开启Chrome多线程下载"></p><p><img src="https://blog.fillpit.cn/content/images/2021/05/image-5.png" alt="开启Chrome多线程下载"></p><p>下载速度提升了 3 倍</p>]]></content>
    
    
    <summary type="html">开启Chrome多线程下载</summary>
    
    
    
    <category term="折腾" scheme="http://example.com/categories/%E6%8A%98%E8%85%BE/"/>
    
    
  </entry>
  
  <entry>
    <title>Jenkins 修改为中文显示</title>
    <link href="http://example.com/2020/08/05/Jenkins-%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/"/>
    <id>http://example.com/2020/08/05/Jenkins-%E4%BF%AE%E6%94%B9%E4%B8%BA%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/</id>
    <published>2020-08-05T03:07:23.000Z</published>
    <updated>2021-09-06T02:42:37.506Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 的界面语言默认是英文的，但Jenkins 提供了中午插件，可以下载中午插件来修改界面语</p><ol><li> 进入Jenkins 的插件界面 搜索 <code>local</code> , 下载 <code>local</code> 和 <code>localization-zh-cn</code> 插件</li></ol><!-- more --><p><img src="https://blog.fillpit.cn/content/images/2020/08/image-14.png" alt="Jenkins 修改为中文显示"></p><p>2. 重启 Jenkins (安装插件时就可以选择重启，也可以手动重启 Jenkins)</p><p>3. 进入系统管理<code>Manage Jenkins &gt; Configure System</code>，找到 Locale 配置，设置为 <code>zh_cn</code></p><p><img src="https://blog.fillpit.cn/content/images/2020/08/image-15.png" alt="Jenkins 修改为中文显示"></p><p>4. 刷新浏览器界面就变成中文的了。但是还是只是部分中文。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Jenkins &amp;#x7684;&amp;#x754C;&amp;#x9762;&amp;#x8BED;&amp;#x8A00;&amp;#x9ED8;&amp;#x8BA4;&amp;#x662F;&amp;#x82F1;&amp;#x6587;&amp;#x7684;&amp;#xFF0C;&amp;#x4F46;Jenkins &amp;#x63D0;&amp;#x4F9B;&amp;#x4E86;&amp;#x4E2D;&amp;#x5348;&amp;#x63D2;&amp;#x4EF6;&amp;#xFF0C;&amp;#x53EF;&amp;#x4EE5;&amp;#x4E0B;&amp;#x8F7D;&amp;#x4E2D;&amp;#x5348;&amp;#x63D2;&amp;#x4EF6;&amp;#x6765;&amp;#x4FEE;&amp;#x6539;&amp;#x754C;&amp;#x9762;&amp;#x8BED;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&amp;#x8FDB;&amp;#x5165;Jenkins &amp;#x7684;&amp;#x63D2;&amp;#x4EF6;&amp;#x754C;&amp;#x9762; &amp;#x641C;&amp;#x7D22; &lt;code&gt;local&lt;/code&gt; , &amp;#x4E0B;&amp;#x8F7D;&lt;/li&gt;&lt;/ol&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Jenkins" scheme="http://example.com/tags/Jenkins/"/>
    
    <category term="中文显示" scheme="http://example.com/tags/%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA/"/>
    
    <category term="语言" scheme="http://example.com/tags/%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry pi 4b 安装 docker</title>
    <link href="http://example.com/2020/07/31/Raspberry-pi-4b-%E5%AE%89%E8%A3%85-docker/"/>
    <id>http://example.com/2020/07/31/Raspberry-pi-4b-%E5%AE%89%E8%A3%85-docker/</id>
    <published>2020-07-31T01:20:23.000Z</published>
    <updated>2021-09-06T02:43:37.150Z</updated>
    
    <content type="html"><![CDATA[<p>下载安装脚本进行安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh</span><br></pre></td></tr></table></figure><!-- more --><p>稍等一会就会输出docker 的安装信息，自此 docker 已经安装完成了</p><p><img src="https://blog.fillpit.cn/content/images/2020/05/TIM--20200502173636.png" alt="Raspberry pi 4b 安装 docker"></p><p>安装后我们可以输入 `docker images` 看看docker 有没有安装成功， 输入后会屏幕会打印出以下错误</p><blockquote><p>Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</p></blockquote><p>那是因为docker 默认是在 root 用户下运行的，如果想在非 root 用户下操作, 可以把用户添加到 docker 组中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker your-user</span><br></pre></td></tr></table></figure><p>执行完后必须得注销重新登陆才会生效</p><h3 id="易用设置"><a href="#易用设置" class="headerlink" title="易用设置"></a><strong>易用设置</strong></h3><p>安装后我们还可以设置 docker 开机自启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><p>还可以设置 docker 的镜像源, 更改镜像源我们需要编辑  <code>sudo nano /etc/docker/daemon.json</code> 文件, 输入以下源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;:[</span><br><span class="line">    &quot;https://reg-mirror.qiniu.com/&quot;,</span><br><span class="line">    &quot;https://hub-mirror.c.163.com/&quot;,</span><br><span class="line">    &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">    &quot;https://dockerhub.azk8s.cn&quot;,</span><br><span class="line">    &quot;http://f1361db2.m.daocloud.io&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改源后需要重启 docker 才会生效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload </span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>如果你想要卸载 docker 可以执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><p>但这样并不会删除主机上的 镜像，容器，卷或自定义配置文件。如果不想保留的话可以执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure><p>详细的安装方法请查看 <a href="https://docs.docker.com/engine/install/debian/">官方文档</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&amp;#x7136;&amp;#x540E;&amp;#x4E0B;&amp;#x8F7D;&amp;#x5B89;&amp;#x88C5;&amp;#x811A;&amp;#x672C;&amp;#x8FDB;&amp;#x884C;&amp;#x5B89;&amp;#x88C5;&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sudo sh get-docker.sh&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&amp;#x7A0D;&amp;#x7B49;&amp;#x4E00;&amp;#x4F1A;&amp;#x5C31;&amp;#x4F1A;&amp;#x8F93;&amp;#x51FA;docker &amp;#x7684;&amp;#x5B89;&amp;#x88C5;&amp;#x4FE1;&amp;#x606F;&amp;#xFF0C;&amp;#x81EA;&amp;#x6B64; docker &amp;#x5DF2;&amp;#x7ECF;&amp;#x5B89;&amp;#x88C5;&amp;#x5B8C;&lt;/p&gt;</summary>
    
    
    
    <category term="开发环境" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    
    
    <category term="docker" scheme="http://example.com/tags/docker/"/>
    
    <category term="raspberry pi" scheme="http://example.com/tags/raspberry-pi/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins 配置邮件发送服务</title>
    <link href="http://example.com/2020/07/03/Jenkins-%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E6%9C%8D%E5%8A%A1/"/>
    <id>http://example.com/2020/07/03/Jenkins-%E9%85%8D%E7%BD%AE%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81%E6%9C%8D%E5%8A%A1/</id>
    <published>2020-07-03T09:23:22.000Z</published>
    <updated>2021-09-06T02:42:22.479Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins每次执行完了之后都要登陆到页面上去看是否重建成功没，相当麻烦，配置好邮件通知服务在Jenkins建立完后会自动发送邮件通知相关人员，再也不用为建造失败而担心受怕了</p><!-- more --><h3 id="一。下载插件"><a href="#一。下载插件" class="headerlink" title="一。下载插件"></a>一。下载插件</h3><p>：管理詹金斯-&gt;管理插件-&gt;可用搜索电子邮件扩展插件插件初始化安装</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051641339.jpg" alt="Jenkins 配置邮件发送服务"></p><h3 id="二。设置插件"><a href="#二。设置插件" class="headerlink" title="二。设置插件"></a>二。设置插件</h3><p>：管理詹金斯-&gt;配置系统</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051643438.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="配置管理员的邮件地址"><a href="#配置管理员的邮件地址" class="headerlink" title="配置管理员的邮件地址"></a>配置管理员的邮件地址</h4><p>先配置一下管理员的邮件地址，此地址必须与邮件的发送帐户一致</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051643192.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="配置发送服务器"><a href="#配置发送服务器" class="headerlink" title="配置发送服务器"></a>配置发送服务器</h4><p>配置邮件的发送服务器和内容类型</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051643954.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="设置邮件发送方的用户名密码"><a href="#设置邮件发送方的用户名密码" class="headerlink" title="设置邮件发送方的用户名密码"></a>设置邮件发送方的用户名密码</h4><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051644537.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="配置预设收件人"><a href="#配置预设收件人" class="headerlink" title="配置预设收件人"></a>配置预设收件人</h4><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051645091.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="配置邮件主题和模版"><a href="#配置邮件主题和模版" class="headerlink" title="配置邮件主题和模版"></a>配置邮件主题和模版</h4><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051645778.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="配置发送邮件的默认触发方式"><a href="#配置发送邮件的默认触发方式" class="headerlink" title="配置发送邮件的默认触发方式"></a>配置发送邮件的默认触发方式</h4><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051645760.jpg" alt="Jenkins 配置邮件发送服务"></p><p>里配置配置里，找到后期生成操作编辑电子邮件通知添加一个构建完成后发送邮件  </p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051645635.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="设置收件人地址"><a href="#设置收件人地址" class="headerlink" title="设置收件人地址"></a>设置收件人地址</h4><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051646173.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="设置邮件的发送目标"><a href="#设置邮件的发送目标" class="headerlink" title="设置邮件的发送目标"></a>设置邮件的发送目标</h4><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051646786.jpg" alt="Jenkins 配置邮件发送服务"></p><p>设置好后保存，打造成功后能够收到内置成功的邮件了</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051646166.jpg" alt="Jenkins 配置邮件发送服务"></p><h4 id="ps：附上邮件模版"><a href="#ps：附上邮件模版" class="headerlink" title="ps：附上邮件模版"></a>ps：附上邮件模版</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var=&quot;JOB_NAME&quot;&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span>    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">topmargin</span>=<span class="string">&quot;8&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;4&quot;</span>    </span></span><br><span class="line"><span class="tag">    <span class="attr">offset</span>=<span class="string">&quot;0&quot;</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;95%&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;0&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif&quot;</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>    </span><br><span class="line">            本邮件由系统自动发出，无需回复！<span class="tag">&lt;<span class="name">br</span>/&gt;</span>            </span><br><span class="line">            各位同事，大家好，以下为$&#123;PROJECT_NAME &#125;项目构建信息<span class="tag">&lt;/<span class="name">br</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#CC0000&quot;</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span>    </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称 ： $&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号 ： 第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因： $&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建状态： $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;console&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;BUILD_URL&#125;&quot;</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录 ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;ws&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目  Url ： <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>失败用例<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">                $FAILED_TESTS<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#0B610B&quot;</span>&gt;</span>最近提交(#$SVN_REVISION)<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">&quot;2&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                $&#123;CHANGES_SINCE_LAST_SUCCESS, reverse=true, format=&quot;%c&quot;, changesFormat=&quot;<span class="tag">&lt;<span class="name">li</span>&gt;</span>%d [%a] %m<span class="tag">&lt;/<span class="name">li</span>&gt;</span>&quot;&#125;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                详细提交: <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;$&#123;PROJECT_URL&#125;changes&quot;</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span>    </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span>    </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><h4 id="问题一："><a href="#问题一：" class="headerlink" title="问题一："></a>问题一：</h4><blockquote><p>英文那接收目标默认设置的的英文开发人员空白向收件人列表发送电子邮件的尝试忽略被  </p></blockquote><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051647314.jpg" alt="Jenkins 配置邮件发送服务"></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051647199.jpg" alt="Jenkins 配置邮件发送服务"></p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051647679.jpg" alt="Jenkins 配置邮件发送服务"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Jenkins&amp;#x6BCF;&amp;#x6B21;&amp;#x6267;&amp;#x884C;&amp;#x5B8C;&amp;#x4E86;&amp;#x4E4B;&amp;#x540E;&amp;#x90FD;&amp;#x8981;&amp;#x767B;&amp;#x9646;&amp;#x5230;&amp;#x9875;&amp;#x9762;&amp;#x4E0A;&amp;#x53BB;&amp;#x770B;&amp;#x662F;&amp;#x5426;&amp;#x91CD;&amp;#x5EFA;&amp;#x6210;&amp;#x529F;&amp;#x6CA1;&amp;#xFF0C;&amp;#x76F8;&amp;#x5F53;&amp;#x9EBB;&amp;#x70E6;&amp;#xFF0C;&amp;#x914D;&amp;#x7F6E;&amp;#x597D;&amp;#x90AE;&amp;#x4EF6;&amp;#x901A;&amp;#x77E5;&amp;#x670D;&amp;#x52A1;&amp;#x5728;Jenkins&amp;#x5EFA;&amp;#x7ACB;&amp;#x5B8C;&amp;#x540E;&amp;#x4F1A;&amp;#x81EA;&amp;#x52A8;&lt;/p&gt;</summary>
    
    
    
    <category term="运维" scheme="http://example.com/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="Jenkins" scheme="http://example.com/tags/Jenkins/"/>
    
    <category term="邮件" scheme="http://example.com/tags/%E9%82%AE%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>MAC、iPhone 使用自带的邮件客户端登陆阿里邮箱</title>
    <link href="http://example.com/2020/06/28/MAC%E3%80%81iPhone-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E9%82%AE%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%99%BB%E9%99%86%E9%98%BF%E9%87%8C%E9%82%AE%E7%AE%B1/"/>
    <id>http://example.com/2020/06/28/MAC%E3%80%81iPhone-%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B8%A6%E7%9A%84%E9%82%AE%E4%BB%B6%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%99%BB%E9%99%86%E9%98%BF%E9%87%8C%E9%82%AE%E7%AE%B1/</id>
    <published>2020-06-28T03:34:05.000Z</published>
    <updated>2021-09-05T08:56:03.425Z</updated>
    
    <content type="html"><![CDATA[<p>阿里云邮箱除了网页版还可以使用第三方的工具如OUTlook,foxmail等，原理都一样的, 这里给大家操作一下使用自带的客户端登录邮箱。</p><h2 id="在-Mac-上登录"><a href="#在-Mac-上登录" class="headerlink" title="在 Mac 上登录"></a>在 Mac 上登录</h2><h3 id="一-点击-邮件-gt-账户"><a href="#一-点击-邮件-gt-账户" class="headerlink" title="一. 点击 邮件 -&gt; 账户"></a>一. 点击 <code>邮件 -&gt; 账户</code></h3><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051654310.jpg" alt="MAC、iPhone 使用自带的邮件客户端登陆阿里邮箱"></p><h3 id="二-选择其它账户-点击继续"><a href="#二-选择其它账户-点击继续" class="headerlink" title="二. 选择其它账户, 点击继续"></a>二. 选择其它账户, 点击继续</h3><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051654347.jpg" alt="MAC、iPhone 使用自带的邮件客户端登陆阿里邮箱"></p><h3 id="三-填上用户名、密码-点击登录"><a href="#三-填上用户名、密码-点击登录" class="headerlink" title="三. 填上用户名、密码, 点击登录"></a>三. 填上用户名、密码, 点击登录</h3><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051655283.jpg" alt="MAC、iPhone 使用自带的邮件客户端登陆阿里邮箱"></p><h3 id="四-接着会弹出以下界面-输入-收-发件服务器-后点击登录就能登录成功了"><a href="#四-接着会弹出以下界面-输入-收-发件服务器-后点击登录就能登录成功了" class="headerlink" title="四. 接着会弹出以下界面, 输入 收/发件服务器 后点击登录就能登录成功了"></a>四. 接着会弹出以下界面, 输入 收/发件服务器 后点击登录就能登录成功了</h3><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051655887.jpg" alt="MAC、iPhone 使用自带的邮件客户端登陆阿里邮箱"></p><p>ps:<br>收件服务器: imap.aliyun.com \  pop3.aliyun.com<br>发件服务器: smtp.aliyun.com</p><h2 id="iPhone-上登录"><a href="#iPhone-上登录" class="headerlink" title="iPhone 上登录"></a>iPhone 上登录</h2><h3 id="一-输入-用户名、密码-后点击下一步"><a href="#一-输入-用户名、密码-后点击下一步" class="headerlink" title="一. 输入 用户名、密码 后点击下一步"></a>一. 输入 用户名、密码 后点击下一步</h3><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051655702.jpg" alt="MAC、iPhone 使用自带的邮件客户端登陆阿里邮箱"></p><h3 id="二-填上收-发件服务器-和用户名密码后点击下一步-稍等片刻后就会进入邮箱的主界面了"><a href="#二-填上收-发件服务器-和用户名密码后点击下一步-稍等片刻后就会进入邮箱的主界面了" class="headerlink" title="二. 填上收/发件服务器 和用户名密码后点击下一步, 稍等片刻后就会进入邮箱的主界面了"></a>二. 填上收/发件服务器 和用户名密码后点击下一步, 稍等片刻后就会进入邮箱的主界面了</h3><p>服务器类型地址用户名密码 收件服务器imap.aliyun.com完整的邮箱账号如<a href="mailto:test@aliyun.com">test@aliyun.com</a>邮箱登录密码发件服务器smtp.aliyun.com完整的邮箱账号如<a href="mailto:test@aliyun.com">test@aliyun.com</a>邮箱登录密码</p><p><img src="https://gitee.com/myisafei/figurebed/raw/master/img/202109051655568.jpg" alt="MAC、iPhone 使用自带的邮件客户端登陆阿里邮箱"></p><p>PS：如您需要使用SSL加密协议，请对应将服务器端口更改为：<br>POP3：995    IMAP：993   SMTP：465</p>]]></content>
    
    
    <summary type="html">使用mac 或者是 iPhone 自带的邮件客户端登录阿里邮箱进行收发邮件</summary>
    
    
    
    
    <category term="阿里邮箱" scheme="http://example.com/tags/%E9%98%BF%E9%87%8C%E9%82%AE%E7%AE%B1/"/>
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
    <category term="iPhone" scheme="http://example.com/tags/iPhone/"/>
    
  </entry>
  
  <entry>
    <title>Java 多线程中 Thread、Runnable 和 FutureTask 比较</title>
    <link href="http://example.com/2019/12/01/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD-Thread%E3%80%81Runnable-%E5%92%8C-FutureTask-%E6%AF%94%E8%BE%83/"/>
    <id>http://example.com/2019/12/01/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%B8%AD-Thread%E3%80%81Runnable-%E5%92%8C-FutureTask-%E6%AF%94%E8%BE%83/</id>
    <published>2019-12-01T06:15:14.000Z</published>
    <updated>2021-09-06T02:41:40.679Z</updated>
    
    <content type="html"><![CDATA[<!-- more --><h3 id="1-用-Thread-创建一个线程"><a href="#1-用-Thread-创建一个线程" class="headerlink" title="1. 用 Thread 创建一个线程"></a>1. 用 Thread 创建一个线程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class ThreadTest &#123;</span><br><span class="line">  public static class MyThread extends Thread &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void run() &#123;</span><br><span class="line">      Thread.sleep(100);</span><br><span class="line">      System.out.println(&quot;Hello world&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    // 创建线程</span><br><span class="line">    MyThread myThread = new MyThread();</span><br><span class="line">    // 启动线程</span><br><span class="line">    myThread.start();</span><br><span class="line">    System.out.println(&quot;Main&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  可以直接使用 this 获取当前线程</li><li>  Java 不支持多继承, 如果继承了 Thread 就不能继承其他类了</li><li>  任务与代码没有分离, 如果多个线程执行一样的任务时需要多份任务代码</li><li>  没有返回值</li></ul><h5 id="2-用-Runnable-创建一个线程"><a href="#2-用-Runnable-创建一个线程" class="headerlink" title="2. 用 Runnable 创建一个线程"></a>2. 用 Runnable 创建一个线程</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class RunAbleTask implements Runnable &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public void run() &#123;</span><br><span class="line">    Thread.sleep(100);</span><br><span class="line">    System.out.println(&quot;Hello World&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    // 创建任务</span><br><span class="line">    RunAbleTask runAbleTask = new RunAbleTask();</span><br><span class="line">    // 启动任务</span><br><span class="line">    new Thread(runAbleTask).start();</span><br><span class="line">    new Thread(runAbleTask).start();</span><br><span class="line">    System.out.println(&quot;Main&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  多个线程可以共享一份 task 代码逻辑</li><li>  RunAbleTask 可以继承其他类</li><li>  没有返回值</li></ul><h5 id="3-用-FutureTask-创建一个线程"><a href="#3-用-FutureTask-创建一个线程" class="headerlink" title="3. 用 FutureTask 创建一个线程"></a>3. 用 FutureTask 创建一个线程</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class CallerTask implements Callable&lt;String&gt; &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public String call() throws Exception &#123;</span><br><span class="line">    Thread.sleep(100);</span><br><span class="line">    return &quot;Hello World&quot;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    // 创建异步任务</span><br><span class="line">//    FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(() -&gt; &quot;Hello World&quot;);</span><br><span class="line">    FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(new CallerTask());</span><br><span class="line">    // 启动多线程</span><br><span class="line">    new Thread(futureTask).start();</span><br><span class="line">    // 等待任务执行完毕</span><br><span class="line">    String result = null;</span><br><span class="line">    try &#123;</span><br><span class="line">      result = futureTask.get();</span><br><span class="line">    &#125; catch (InterruptedException | ExecutionException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(result);</span><br><span class="line">    System.out.println(&quot;Main&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>  多个线程可以共享一份 task 代码逻辑</li><li>  FutureTask 可以继承其他类</li><li>  有返回值</li><li>  主线程会堵塞</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th align="center">特性</th><th align="center">Thread</th><th align="center">Runable</th><th align="center">FutureTask</th></tr></thead><tbody><tr><td align="center">是否能继承其他类</td><td align="center">不能</td><td align="center">能</td><td align="center">能</td></tr><tr><td align="center">共享任务代码</td><td align="center">不能</td><td align="center">能</td><td align="center">能</td></tr><tr><td align="center">有返回值</td><td align="center">没有</td><td align="center">没有</td><td align="center">有</td></tr><tr><td align="center">会堵塞主线程</td><td align="center">不会</td><td align="center">不会</td><td align="center">会</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;1-thread-&quot;&gt;1. &amp;#x7528; Thread &amp;#x521B;&amp;#x5EFA;&amp;#x4E00;&amp;#x4E2A;&amp;#x7EBF;&amp;#x7A0B;&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;public class ThreadTest {
  public static class MyThread extends Thread {
    @Override
    public void run() {
      Thread.sleep(100);
      System.out.println(&quot;Hello world&quot;);
    }
  }

  public static void main(String[] args) {
    // &amp;#x521B;&amp;#x5EFA;&amp;#x7EBF;&amp;#x7A0B;
    MyThread myThread = new MyThread();
    // &amp;#x542F;&amp;#x52A8;&amp;#x7EBF;&amp;#x7A0B;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Mac 环境下使用 NVM 管理多版本的 NodeJs</title>
    <link href="http://example.com/2019/08/01/Mac-%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8-NVM-%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%AC%E7%9A%84-NodeJs/"/>
    <id>http://example.com/2019/08/01/Mac-%E7%8E%AF%E5%A2%83%E4%B8%8B%E4%BD%BF%E7%94%A8-NVM-%E7%AE%A1%E7%90%86%E5%A4%9A%E7%89%88%E6%9C%AC%E7%9A%84-NodeJs/</id>
    <published>2019-08-01T16:10:25.000Z</published>
    <updated>2021-09-06T02:42:53.848Z</updated>
    
    <content type="html"><![CDATA[<p>有时我们需要安装多个版本的nodejs，安装可能不是什么难事, 但多个 node 的版本的切换就非常让人头疼，这个时候就轮到 nvm 出场了, 使用 nvm可以让你方便快捷地切换node版本.</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装之前先检查当前用户的用户目录下是否存在以下文件</p><blockquote><p>~ .bash_profile</p></blockquote><p>没有的话就先创建, 安装脚本的时候会自动帮我们把环境变量写进该文件,当然你软件安装完后发现没这个文件的话只需要自行把以下代码写入到该文件内也是一样的效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>好了准备工作完成后我们就可以运行下面的脚本来 <strong>下载</strong> 或 <strong>更新</strong> nvm</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</span><br></pre></td></tr></table></figure><p><strong>注意: 如果你安装了 oh my zsh, 需要在 .zshrc 文件去添加以下配置信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><p>否则你运行 <code>nvm -v</code> 可能会遇到以下提示</p><blockquote><p>nvm: command not found</p></blockquote><h3 id="nvm-常用命令"><a href="#nvm-常用命令" class="headerlink" title="nvm 常用命令"></a>nvm 常用命令</h3><p>列出所有安装的版本</p><blockquote><p>nvm ls</p></blockquote><p>显示当前使用的版本</p><blockquote><p>nvm current</p></blockquote><p>列出官网上node的所有版本</p><blockquote><p>nvm ls-remote</p></blockquote><p>安装最新稳定版 node</p><blockquote><p>nvm install stable</p></blockquote><p>安装指定版本</p><blockquote><p>nvm install <version></p></blockquote><p>切换使用指定的版本node</p><blockquote><p>nvm use <version></p></blockquote><p>指定默认版本</p><blockquote><p>nvm alias default <version></p></blockquote><h3 id="nvm-卸载"><a href="#nvm-卸载" class="headerlink" title="nvm 卸载"></a>nvm 卸载</h3><p>先运行以下命令删除下载文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf &quot;$NVM_DIR&quot;</span><br></pre></td></tr></table></figure><p>然后再编辑 <code>~ .bash_profile</code> 和 <code>~ .zshrc</code> 文件删除其环境变量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br><span class="line">[ -s &quot;$NVM_DIR/bash_completion&quot; ] &amp;&amp; \. &quot;$NVM_DIR/bash_completion&quot;  # This loads nvm bash_completion</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上方法都是我亲自试过的, 如果你按照教程安装后还是有问题 应该先核对一下版本是否有问题, 当然你也可以去 <a href="https://github.com/nvm-sh/nvm#mac-os-troubleshooting">官方仓库</a> 看看最新的版本和安装方法</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;kg-card kg-image-card kg-card-hascaption&quot;&gt;&lt;img src=&quot;http://image.fillpit.cn/2019-08-02-vidar-nordli-mathisen-4YiA1Efj1WA-unsplash.jpg&quot; class=&quot;kg-image&quot; alt=&quot;&amp;#x6444;&amp;#x5F71;&amp;#xFF1A;Vidar Nordli-Mathisen&amp;#xFF0C;&amp;#x6765;&amp;#x81EA;Unsplash&quot; loading=&quot;lazy&quot;&gt;&lt;figcaption&gt;&amp;#x6444;&amp;#x5F71;&amp;#xFF1A;Vidar Nordli-Mathisen&amp;#xFF0C;&amp;#x6765;&amp;#x81EA;Unsplash&lt;/figcaption&gt;&lt;/figure&gt;&lt;h3 id=&quot;-&quot;&gt;&amp;#x7B80;&amp;#x4ECB;&lt;/h3&gt;&lt;p&gt;Node Version Manager - Simple bash script to manage multiple active node.js versions&lt;/p&gt;&lt;p&gt;&amp;#x6709;&amp;#x65F6;&amp;#x6211;&amp;#x4EEC;&amp;#x9700;&amp;#x8981;&amp;#x5B89;&amp;#x88C5;&amp;#x591A;&amp;#x4E2A;&amp;#x7248;&amp;#x672C;&amp;#x7684;nodejs&amp;#xFF0C;&amp;#x5B89;&amp;#x88C5;&amp;#x53EF;&amp;#x80FD;&amp;#x4E0D;&amp;#x662F;&amp;#x4EC0;&amp;#x4E48;&amp;#x96BE;&amp;#x4E8B;&lt;/p&gt;</summary>
    
    
    
    <category term="效率" scheme="http://example.com/categories/%E6%95%88%E7%8E%87/"/>
    
    
    <category term="软件使用" scheme="http://example.com/tags/%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot 打 war 包</title>
    <link href="http://example.com/2019/06/28/Spring-boot-%E6%89%93-war-%E5%8C%85/"/>
    <id>http://example.com/2019/06/28/Spring-boot-%E6%89%93-war-%E5%8C%85/</id>
    <published>2019-06-28T09:09:44.000Z</published>
    <updated>2021-09-06T02:44:01.938Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>在启动类的同级目录下新建一个 ServletInitializer.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public class ServletInitializer extends SpringBootServletInitializer &#123;</span><br><span class="line">  @Override</span><br><span class="line">  protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line">    // DemoApplication.class 是启动类</span><br><span class="line">    return application.sources(DemoApplication.class);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>修改 maven 的打包方式为 war</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br></pre></td></tr></table></figure><h3 id="小节"><a href="#小节" class="headerlink" title="小节"></a>小节</h3><p>看网上很多教程要加入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">  &lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>但我测试的时候不加入也能打包, 用 tomcat 也能运行和访问,所以教程里就没写这个了</p>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;http://image.fillpit.cn/2019_06_27.jpg&quot; class=&quot;kg-image&quot; alt=&quot;2019_06_27&quot; loading=&quot;lazy&quot;&gt;&lt;/figure&gt;&lt;h3 id=&quot;-&quot;&gt;&amp;#x7B2C;&amp;#x4E00;&amp;#x6B65;&lt;/h3&gt;&lt;p&gt;&amp;#x5728;&amp;#x542F;&amp;#x52A8;&amp;#x7C7B;&amp;#x7684;&amp;#x540C;&amp;#x7EA7;&amp;#x76EE;&amp;#x5F55;&amp;#x4E0B;&amp;#x65B0;&amp;#x5EFA;&amp;#x4E00;&amp;#x4E2A; ServletInitializer.java&lt;/p&gt;&lt;pre&gt;&lt;code&gt;public class ServletInitializer extends SpringBootServletInitializer {
  @Override
  protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
    // DemoApplication.class &amp;#x662F;&amp;#x542F;&amp;#x52A8;&amp;#x7C7B;
    return application.sources(DemoApplication.class);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;--1&quot;&gt;&amp;#x7B2C;&amp;#x4E8C;&amp;#x6B65;&lt;/h3&gt;&lt;p&gt;&amp;#x4FEE;&amp;#x6539; maven &amp;#x7684;&amp;#x6253;&amp;#x5305;&lt;/p&gt;</summary>
    
    
    
    <category term="编程" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="Spring boot" scheme="http://example.com/tags/Spring-boot/"/>
    
  </entry>
  
</feed>
